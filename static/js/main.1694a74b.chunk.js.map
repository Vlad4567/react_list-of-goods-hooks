{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","reversedField","setReversedField","sortField","setSortField","visibleGoods","goods","preparedGoods","sort","good1","good2","ALPHABETICALLY","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAoBKA,E,0EAfQC,EAAmC,CAC9C,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAKGD,K,gCAAAA,E,iBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAA0CC,oBAAkB,GAA5D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAkCF,mBAAwB,IAA1D,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EA/BR,SACEC,EADF,GAGoB,IADhBH,EACe,EADfA,UAAWF,EACI,EADJA,cAEPM,EAAa,YAAOD,GAqB1B,OAnBIH,GACFI,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQP,GACN,KAAKN,EAASc,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXb,GACFM,EAAcQ,UAGTR,EAM+BS,CAAiBlB,EAAiB,CACtEK,YACAF,kBAQF,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,oCACPE,IAAW,CAAE,WAAYhB,IAAcN,EAASc,kBAClDS,QAAS,kBAAMhB,EAAaP,EAASc,iBAJvC,iCASA,wBACEO,KAAK,SACLD,UAAS,uCACPE,IAAW,CAAE,WAAYhB,IAAcN,EAASgB,UAClDO,QAAS,kBAAMhB,EAAaP,EAASgB,SAJvC,4BASA,wBACEK,KAAK,SACLD,UAAS,uCACPE,IAAW,CAAE,YAAalB,KAC5BmB,QAAS,kBAAMlB,GAAkBD,IAJnC,sBASEE,GAAaF,IACb,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAvCV,WACEhB,EAAa,IACbF,GAAiB,IAkCX,sBAUJ,6BACGG,EAAagB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC/GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1694a74b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer: GoodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype GoodsFromServer = string[];\n\nenum SortType {\n  ALPHABETICALLY = 'alphabetically',\n  LENGTH = 'length',\n}\n\ninterface SortOptions {\n  sortField: SortType | '',\n  reversedField: boolean,\n}\n\nfunction getPreparedGoods(\n  goods: GoodsFromServer,\n  { sortField, reversedField }: SortOptions,\n): GoodsFromServer {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversedField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [reversedField, setReversedField] = useState<boolean>(false);\n  const [sortField, setSortField] = useState<SortType | ''>('');\n  const visibleGoods: GoodsFromServer = getPreparedGoods(goodsFromServer, {\n    sortField,\n    reversedField,\n  });\n\n  function reset() {\n    setSortField('');\n    setReversedField(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info\n          ${classNames({ 'is-light': sortField !== SortType.ALPHABETICALLY })}`}\n          onClick={() => setSortField(SortType.ALPHABETICALLY)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success\n          ${classNames({ 'is-light': sortField !== SortType.LENGTH })}`}\n          onClick={() => setSortField(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning\n          ${classNames({ 'is-light': !reversedField })}`}\n          onClick={() => setReversedField(!reversedField)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversedField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}